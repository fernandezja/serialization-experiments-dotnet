using PluginDesign.ScreenElements.SequentialElement;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;

namespace DeserializeObjectFromStringThatIsAnByteArray
{
    class Program
    {
        static void Main(string[] args)
        {
            //String that is an byte array
            string cadena = "";

            int max = cadena.Length / 2;
            byte[] buffer = new byte[max];
            for (int i = 0; i <= max - 1; i++)
            {
                buffer[i] = Convert.ToByte(cadena.Substring(i * 2, 2), 16);
            }

            var bufferEnCadena = System.Text.Encoding.Default.GetString(buffer);

            Console.WriteLine(bufferEnCadena);

            var hashTableUnserialize2 = ByteArrayToObject<Hashtable>(buffer);

            Console.WriteLine("----------------------------------------------------------------");
            Console.WriteLine("Keys");
            foreach (var key in hashTableUnserialize2.Keys)
            {
                Console.WriteLine($" - Key > {key}");
            }

            Console.WriteLine("----------------------------------------------------------------");
            Console.WriteLine("Content");
            foreach (var key in hashTableUnserialize2.Keys)
            {
                Console.WriteLine($" - Key > {key}");
                Console.WriteLine($" - Content");
                var list = (List<SequentialElementGC>)(hashTableUnserialize2[key]);
                var index = 0;
                
                foreach (var item in list)
                {
                    Console.WriteLine($" - Item {index}");
                    Console.WriteLine($"        - Id > {item.Id}");
                    Console.WriteLine($"        - EstimuloCritico > {item.EstimuloCritico}");
                    Console.WriteLine($"        - IdElement > {item.IdElement}");
                    index++;
                }
                
                Console.WriteLine();
            }

            Console.ReadKey();
        }

        private static byte[] ObjectToByteArray(object obj)
        {
            if (obj == null)
                return null;

            BinaryFormatter bf = new BinaryFormatter();
            using (MemoryStream ms = new MemoryStream())
            {
                bf.Serialize(ms, obj);
                return ms.ToArray();
            }
        }


        /// <summary>
        /// Error	SYSLIB0011	'BinaryFormatter.Deserialize(Stream)' is obsolete: 'BinaryFormatter serialization is obsolete and should not be used. See https://aka.ms/binaryformatter for more information.'
        /// https://learn.microsoft.com/es-es/dotnet/core/compatibility/core-libraries/5.0/binaryformatter-serialization-obsolete
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="data"></param>
        /// <returns></returns>
        [Obsolete("")]
        private static T ByteArrayToObject<T>(byte[] data)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                var binaryFormatter = new BinaryFormatter();
                ms.Write(data, 0, data.Length);
                ms.Seek(0, SeekOrigin.Begin);
                T obj = (T)binaryFormatter.Deserialize(ms);
                return obj;
            }
        }
    }
}
